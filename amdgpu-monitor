#!/usr/bin/env python3
"""amdgpu-monitor  -  Displays current status of all active GPUs

    A utility to give the current state of all compatible AMD GPUs.  The default behavior
    is to just output relevant GPU card parameters.  With the *--pstates* otion, the
    p-state tables are output instead of GPU details. With the *--loop* option, a table
    of relevant parameters will be continuously updated in the current window until
    Ctrl-C is pressed.  With the *--gui* option, a table of relevant parameters will be
    updated in a Gtk window.  You can specify the delay between updates with the
    *--sleep N* option where N is an integer > zero that specifies the number of seconds
    to sleep.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = ""
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-monitor"
__version__ = "v1.1.0"
__maintainer__ = "RueiKe"
__status__ = "Stable Release"

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import time
from GPUmodules import GPUmodules as GPU
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path

# Instantiate project constants
gut_const = GPU.GUT_CONST()

class MonitorWindow(Gtk.Window):
    def __init__(self, gpu_list):
        Gtk.Window.__init__(self, title="GPU Monitor")
        self.set_border_width(1)
        if(os.path.isfile(gut_const.PATH + '/amdgpu-monitor.icon.jpg') == True):
            self.set_icon_from_file(gut_const.PATH + '/amdgpu-monitor.icon.jpg')


def updateData(gpu_list, devices):
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    for dk, dv in devices.items():
        for lk, lv in dv.items():
            if lk == "card_num":
                data_value = "card"+gpu_list.list[dk].get_value("card_num")
            else:
                data_value = str(gpu_list.list[dk].get_value(lk))
            lv.set_text(data_value)
            #lv.set_text(str(gpu_list.list[dk].get_value(lk)))

def refresh(refreshtime, updateData, gpu_list, devices):
    while True:
        GLib.idle_add(updateData, gpu_list, devices)
        time.sleep(refreshtime)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--pstates", help="Output pstate tables instead of GPU details", action="store_true", default=False)
    parser.add_argument("--loop", help="Looped output in table", action="store_true", default=False)
    parser.add_argument("--gui", help="Display GTK Version of Monitor", action="store_true", default=False)
    parser.add_argument("--sleep", help="Number of seconds to sleep between updates", type=int, default=2)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    if args.debug == True :  gut_const.DEBUG = True
    if int(args.sleep) > 0 :
        gut_const.SLEEP = int(args.sleep)
    else:
        print("Invalid value for sleep specified.  Must be an integer great than zero")
        sys.exit(-1)

    # 
    if args.loop == True and args.gui == True: print("--loop and --gui are mutually exclusive")

    if args.loop == True or args.gui == True:
        if args.pstates == True : print("--pstates has no effect with --loop or --gui")


    # Check python version
    (python_major, python_minor, python_patch) = platform.python_version_tuple()
    if python_major < "3":
        print("Using python" + python_major + ", but benchMT requires python3. Exiting...")
        sys.exit(0)
    if python_minor < "6":
        print("Using python " + python_major +"."+ python_minor +"."+ python_patch +
                " but, benchMT requires python 3.6 and up. Exiting...")
        sys.exit(0)

    # Check Linux Kernel version
    linux_version = platform.release()
    if int(linux_version.split(".")[0]) < 4:
        print(f"Using Linux Kernel {linux} but benchMT requires > 4.17. Exiting...")
        sys.exit(0)
    if int(linux_version.split(".")[1]) < 8:
        print(f"Using Linux Kernel {linux} but benchMT requires > 4.17. Exiting...")
        sys.exit(0)

    # Check value of AMD Feature mask
    try:
        featuremask = gut_const.read_amdfeaturemask()
    except FileNotFoundError:
        print("Cannot read ppfeaturemask. Exiting...")
        sys.exit(-1)
    if featuremask == int(0xffff7fff) or featuremask == int(0xffffffff) :
        print("AMD Wattman features enabled: %s" % hex(featuremask))
    else:
        print("AMD Wattman features not enabled: %s, See README file." % hex(featuremask))
        sys.exit(-1)

    gpu_list = GPU.GPU_LIST()
    gpu_list.get_gpu_list()
    num_amd_gpus = gpu_list.num_gpus()

    if num_amd_gpus == 0:
        print("No AMD GPUs detected, exiting...")
        sys.exit(-1)
    else:
        print(f"{num_amd_gpus} AMD GPUs detected")
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    gpu_list.get_gpu_details()

    num_com_amd_gpus = gpu_list.num_compatible_gpus()
    if num_com_amd_gpus == 0:
        print("None are Compatible, exiting...")
        #sys.exit(-1)
    else:
        print(f"{num_amd_gpus} are Compatible")
        print("")

    if args.loop == False and args.gui == False:
        gpu_list.get_pstates()
        if args.pstates == True :
            gpu_list.print_pstates()
        else:
            gpu_list.print()
        sys.exit(0)

    if args.gui == True:
        # Display Gtk style Monitor
        gmonitor = MonitorWindow(gpu_list)
        grid = Gtk.Grid()
        grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1))
        gmonitor.add(grid)

        col = 0
        #row_labels = {"card_num": Gtk.Label(label="Card #")}
        row_labels = {"card_num": Gtk.Label()}
        row_labels["card_num"].set_markup("<b>Card #</b>")
        for k, v in gpu_list.table_param_labels.items():
            row_labels[k] = Gtk.Label()
            #row_labels[k] = Gtk.Label(label=str(v))
            row_labels[k].set_markup("<b>"+str(v)+"</b>")
        i=0
        for k, v in row_labels.items():
            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            v.set_property("margin-top", 1)
            v.set_property("margin-bottom", 1)
            v.set_property("margin-right", 4)
            v.set_property("margin-left", 4)
            lbox.pack_start(v, True, True, 0)
            grid.attach(lbox, col, i, 1, 1)
            v.set_alignment(0, 0.5)
            #grid.attach(v, col, i, 1, 1)
            i += 1

        devices = {}
        for k, v in gpu_list.list.items():
            devices[v.uuid] = {"card_num":  Gtk.Label(label="card"+v.get_value("card_num"))}
            for cv in gpu_list.table_param_labels:
                devices[v.uuid][cv] = Gtk.Label(label=v.get_value(str(cv)))
        for dk, dv in devices.items():
            col += 1
            i = 0
            for lk, lv in dv.items():
                lbox = Gtk.Box(spacing=6)
                lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
                lbox.set_property("margin-top", 1)
                lbox.set_property("margin-bottom", 1)
                lbox.set_property("margin-right", 1)
                lbox.set_property("margin-left", 1)
                lv.set_property("margin-top", 1)
                lv.set_property("margin-bottom", 1)
                lv.set_property("margin-right", 3)
                lv.set_property("margin-left", 3)
                lbox.pack_start(lv, True, True, 0)
                grid.attach(lbox, col, i, 1, 1)
                #grid.attach(lv, col, i, 1, 1)
                i += 1

        gmonitor.connect("delete-event", Gtk.main_quit)
        gmonitor.show_all()

        # Start thread to update Monitor
        monthread = threading.Thread(target=refresh, daemon=True, args=[gut_const.SLEEP, updateData, gpu_list, devices]).start()

        Gtk.main()

    else:
        # Display text style Monitor
        try:
            while True:
                gpu_list.read_hw_data()
                gpu_list.read_device_data()
                if gut_const.DEBUG == False: os.system('clear')
                gpu_list.print_table()
                time.sleep(gut_const.SLEEP)
        except KeyboardInterrupt:
            sys.exit(0)


if __name__ == "__main__":
    main()
